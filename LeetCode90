### correct coding###
class Solution:
  def subsetsWithDup(self, nums):
    res = []
    nums.sort() #@先排序，讓重複元素相鄰
    def backtrack(index, path):
      if index == len(nums):
         res.append(path.copy())
         return
      #選擇當前數字
      path.append(nums[index])
      backtrack(index + 1, path)
      path.pop()
      #@跳過重複數字
      while index + 1 < len(nums) and nums[index] == nums[index + 1]:
        print(index, path) #debug技巧
        index += 1
      #不選當前數字(且跳過重複)
      backtrack(index + 1, path)
    backtrack(0, [])
    return res 
  
print(Solution().subsetsWithDup([1, 2, 2]))
------------------------------------------------------------------------------
1 [1]
1 []
[[1, 2, 2], [1, 2], [1], [2, 2], [2], []]


###debug方式，看電腦如何跳過重複index###
###print(f"當前index = {index}, path = {path}") #debug用###
class Solution:
  def subsetsWithDup(self, nums):
    res = []
    nums.sort() #@先排序，讓重複元素相鄰
    def backtrack(index, path):
      print(f"當前index = {index}, path = {path}") #debug用
      if index == len(nums):
         res.append(path.copy())
         return
      #選擇當前數字(先選)
      path.append(nums[index])
      backtrack(index + 1, path)
      path.pop()
      #@跳過重複數字
      while index + 1 < len(nums) and nums[index] == nums[index + 1]:
        index += 1
      #不選當前數字(且跳過重複)
      backtrack(index + 1, path)
    backtrack(0, [])
    return res

print(Solution().subsetsWithDup([1, 2, 2]))
___________________________________________________________________________
當前index = 0, path = []
當前index = 1, path = [1]
當前index = 2, path = [1, 2]
當前index = 3, path = [1, 2, 2]
當前index = 3, path = [1, 2]
當前index = 3, path = [1]
當前index = 1, path = []
當前index = 2, path = [2]
當前index = 3, path = [2, 2]
當前index = 3, path = [2]
當前index = 3, path = []
[[1, 2, 2], [1, 2], [1], [2, 2], [2], []]


###debug技巧再升級，在while loop後加一行輸出，觀察跳過多少重複數字###
class Solution:
  def subsetsWithDup(self, nums):
    res = []
    nums.sort() #@先排序，讓重複元素相鄰
    def backtrack(index, path):
      print(f"當前index = {index}, path = {path}") #debug用
      if index == len(nums):
         res.append(path.copy())
         return
      #選擇當前數字(先選)
      path.append(nums[index])
      backtrack(index + 1, path)
      path.pop()
      #@跳過重複數字
      while index + 1 < len(nums) and nums[index] == nums[index + 1]:
        index += 1
      print(f"跳過重複，新index = {index}")  #debug技巧再升級，觀察跳過多少重複數字
      #不選當前數字(且跳過重複)
      backtrack(index + 1, path)
    backtrack(0, [])
    return res

print(Solution().subsetsWithDup([1, 2, 2]))
 ______________________________________________________________________________________
當前index = 0, path = []
當前index = 1, path = [1]
當前index = 2, path = [1, 2]
當前index = 3, path = [1, 2, 2]
跳過重複，新index = 2
當前index = 3, path = [1, 2]
跳過重複，新index = 2
當前index = 3, path = [1]
跳過重複，新index = 0
當前index = 1, path = []
當前index = 2, path = [2]
當前index = 3, path = [2, 2]
跳過重複，新index = 2
當前index = 3, path = [2]
跳過重複，新index = 2
當前index = 3, path = []
[[1, 2, 2], [1, 2], [1], [2, 2], [2], []]

###while loop 跳過重複的分支，print(f"當前 path ={path}, 跳過{nums[index]}的重複兄弟們~")###
class Solution:
  def subsetsWithDup(self, nums):
    res = []
    nums.sort() #@先排序，讓重複元素相鄰
    def backtrack(index, path):
      print(f"當前index = {index}, path = {path}") #debug用
      if index == len(nums):
         res.append(path.copy())
         return
      #選擇當前數字(先選)
      path.append(nums[index])
      backtrack(index + 1, path)
      path.pop()
      #@跳過重複數字
      while index + 1 < len(nums) and nums[index] == nums[index + 1]:
        index += 1
      print(f"跳過重複，新index = {index}")  #debug技巧再升級，觀察跳過多少重複數字
      #不選當前數字(且跳過重複)
      backtrack(index + 1, path)
      print(f"當前 path ={path}, 跳過{nums[index]}的重複兄弟們~") # debug用
    backtrack(0, [])
    return res

print(Solution().subsetsWithDup([1, 2, 2]))
____________________________________________________________________________________________
當前index = 0, path = []
當前index = 1, path = [1]
當前index = 2, path = [1, 2]
當前index = 3, path = [1, 2, 2]
跳過重複，新index = 2
當前index = 3, path = [1, 2]
當前 path =[1, 2], 跳過2的重複兄弟們~
跳過重複，新index = 2
當前index = 3, path = [1]
當前 path =[1], 跳過2的重複兄弟們~
跳過重複，新index = 0
當前index = 1, path = []
當前index = 2, path = [2]
當前index = 3, path = [2, 2]
跳過重複，新index = 2
當前index = 3, path = [2]
當前 path =[2], 跳過2的重複兄弟們~
跳過重複，新index = 2
當前index = 3, path = []
當前 path =[], 跳過2的重複兄弟們~
當前 path =[], 跳過1的重複兄弟們~
[[1, 2, 2], [1, 2], [1], [2, 2], [2], []]
