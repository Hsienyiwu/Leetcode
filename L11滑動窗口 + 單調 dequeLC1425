from collections import deque

class Solution:
    def constrainedSubsetSum(self, nums, k):
        n = len(nums)
        dp = [0] * n
        dp[0] = nums[0]
        ans = dp[0]

        dq = deque([0])  # 存 index，對應的 dp 值遞減

        for i in range(1, n):
            # 移除超出 k 範圍的元素
            while dq and dq[0] < i - k:
                dq.popleft()

            # 狀態轉移
            dp[i] = nums[i] + max(0, dp[dq[0]])
            ans = max(ans, dp[i])

            # 維護單調性
            while dq and dp[dq[-1]] <= dp[i]:
                dq.pop()
            dq.append(i)

        return ans
