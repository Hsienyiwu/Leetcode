###解法一 : 用「0 的計數」版本（最直觀）###

from typing import List

class Solution:
    def longestOnes(self, nums: List[int], k: int) -> int:
        left = 0
        zero_cnt = 0
        ans = 0

        for right, x in enumerate(nums):
            if x == 0:
                zero_cnt += 1

            # 違規就縮：窗口中的 0 超過 k
            while zero_cnt > k:
                if nums[left] == 0:
                    zero_cnt -= 1
                left += 1

            # 窗口目前合法，更新答案
            ans = max(ans, right - left + 1)

        return ans

###解法二 : 用「k 當預算」版本（更簡）###
class Solution:
    def longestOnes(self, nums: List[int], k: int) -> int:
        left = 0
        for right, x in enumerate(nums):
            if x == 0:
                k -= 1  # 花一點預算翻轉 0 -> 1

            if k < 0:     # 超支就把左邊收回來
                if nums[left] == 0:
                    k += 1
                left += 1

        # 走完整個陣列後，right 已在最後；最大合法窗口就是
        return len(nums) - left

