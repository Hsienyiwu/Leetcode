###Coding Solution###
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseBetween(self, head: Optional[ListNode], left: int, right: int) -> Optional[ListNode]:
        if not head or left == right:
            return head

        dummy = ListNode(0, head)
        prev, cur = dummy, head

        #Step1: Move to the node before "left"
        for _ in range(left -1):
            prev, cur = cur, cur.next

        #Step2: Reverse the segment (left to right)
        reverse_prev = None
        original_left = cur #Save the original left node 

        for _ in range(right - left + 1):
            next_temp = cur.next
            cur.next = reverse_prev
            reverse_prev, cur = cur, next_temp

        #Step3:Reconnect 
        original_left.next = cur #Connect to the node after "right"
        prev.next = reverse_prev #Connect the node before "left" to the new head

        return dummy.next
