### Coding Solution (Python3) Runtime:41ms ###

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def hasCycle(self, head: Optional[ListNode]) -> bool:
       if not head or not head. next:
        return False

       slow = head #龜(每次一步)
       fast = head. next #兔(每次兩步)

       while slow != fast:
         if not fast or not fast. next : #兔抵達終點
             return False
         slow = slow. next
         fast = fast. next. next
       return True   #龜兔相遇=有環

###遞歸法###

class Solution:
    def hasCycle(self, head: Optional[ListNode]) -> bool:
       visited = set() #紀錄已訪問節點

       def helper(node):
        if not node:
            return False
        if node in visited: #遇到已訪問節點->有環

            return True
        visited.add(node)
        return helper(node.next) #遞歸檢查下一個節點

       return helper(head)
