###subarray:必須是一段連續的陣列###
class Solution:
    def minSubArrayLen(self, target: int, nums: List[int]) -> int:
        left = 0  # 視窗的左邊界索引
        window_sum = 0  # 目前滑動視窗內元素的總和
        min_len = float('inf')  # 初始化最小長度為無限大，方便後續更新

        for right in range(len(nums)):  # 右邊界索引，從左到右移動
            window_sum += nums[right]  # 將右側元素加入視窗

            while window_sum >= target:  # 當視窗總和達到目標，嘗試縮小視窗
                min_len = min(min_len, right - left + 1)  # 更新最短子陣列長度
                window_sum -= nums[left]  # 移除視窗左側元素
                left += 1  # 移動左邊界

        return 0 if min_len == float('inf') else min_len  # 無符合條件的子陣列則回傳 0

###英文版註解###
class Solution:
    def minSubArrayLen(self, target: int, nums: List[int]) -> int:
        left = 0  # Left boundary of the sliding window
        window_sum = 0  # Current sum of elements in the window
        min_len = float('inf')  # Initialize minimum length as infinity

        for right in range(len(nums)):  # Move the right boundary
            window_sum += nums[right]  # Add current element to the window sum

            # Shrink the window while the sum meets or exceeds the target
            while window_sum >= target:
                min_len = min(min_len, right - left + 1)  # Update minimum length
                window_sum -= nums[left]  # Remove the leftmost element
                left += 1  # Move the left boundary

        # If no valid subarray was found, return 0
        return 0 if min_len == float('inf') else min_len


###白板版程式架構（簡潔、好背）###
LC209（Minimum Size Subarray Sum）是滑動窗口（Sliding Window）入門代表題。

題意：
給定一個正整數陣列 nums 和目標值 target，找出「最短」的連續子陣列，使其元素和 ≥ target。若不存在，回傳 0。

### 模板解法（雙指針 / Sliding Window）###

def minSubArrayLen(target, nums):
    left = 0
    total = 0
    res = float('inf')

    for right in range(len(nums)):
        total += nums[right]

        while total >= target:
            res = min(res, right - left + 1)
            total -= nums[left]
            left += 1

    return 0 if res == float('inf') else res
----------------------------------------------------------------------------------------------------
核心思維：
----------------------------------------------------------------------------------------------------
1. 右指針擴張窗口 → 加總元素直到 sum >= target。
2. 左指針收縮窗口 → 嘗試縮短長度仍保持 sum >= target。
3. 每次更新最小長度。
----------------------------------------------------------------------------------------------------
時間複雜度：O(n)
空間複雜度：O(1)

